#!/usr/bin/env python3
"""
Full Pipeline Integration Test

This script demonstrates the complete job application automation workflow:
1. Scrapes a real job posting from a URL
2. Personalizes a LaTeX resume using GPT-OSS 20B
3. Generates a custom cover letter using GPT-OSS 20B  
4. Provides a fit score assessment
5. Saves all outputs with metadata

This is a comprehensive test of all the major components working together.
"""

import sys
import os
from datetime import datetime

# Add the src directory to the path so we can import our modules
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from job_scraper import JobScraper, JobPosting
from latex_resume_processor import LaTeXResumeProcessor
from cover_letter_generator import CoverLetterGenerator
from ollama_integration import OllamaIntegration


def print_separator(title: str):
    """Print a nice separator with title."""
    print("=" * 70)
    print(f"  {title}")
    print("=" * 70)


def print_job_info(job: JobPosting):
    """Print formatted job information."""
    print(f"🏢 Company: {job.company}")
    print(f"📋 Title: {job.title}")
    print(f"📍 Location: {job.location}")
    print(f"🔗 URL: {job.url}")
    print(f"🛠️  Skills Required: {', '.join(job.skills[:5])}{'...' if len(job.skills) > 5 else ''}")
    print(f"📝 Requirements: {len(job.requirements)} found")
    print(f"📄 Description Length: {len(job.description)} characters")


def save_summary_report(job_posting, resume_result, cover_letter_result, fit_score, output_dir, additional_context=None):
    """Save a summary report of the entire process."""
    report_path = os.path.join(output_dir, "application_summary.md")
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    additional_context_section = ""
    if additional_context:
        additional_context_section = f"""
## Additional Context Provided
{additional_context}
"""
    
    report_content = f"""# Job Application Summary Report

**Generated:** {timestamp}
**Job:** {job_posting.title} at {job_posting.company}

## Job Details
- **URL:** {job_posting.url}
- **Location:** {job_posting.location}
- **Skills Required:** {', '.join(job_posting.skills)}
{additional_context_section}
## Generated Outputs
- **Resume:** `personalized_resume.tex`
- **Cover Letter:** `personalized_cover_letter.md`
- **Fit Score:** {fit_score.fit_score}/100

## Key Personalizations

### Resume Changes
{chr(10).join([f"- {change}" for change in resume_result.key_changes])}

### Cover Letter Highlights
- Tone: {cover_letter_result.tone}
- Skills Emphasized: {', '.join(cover_letter_result.skills_highlighted)}

## Fit Assessment

### Strengths
{chr(10).join([f"- {strength}" for strength in fit_score.strengths])}

### Areas for Improvement
{chr(10).join([f"- {weakness}" for weakness in fit_score.weaknesses])}

### Missing Skills
{chr(10).join([f"- {skill}" for skill in fit_score.missing_skills])}

### Recommendations
{chr(10).join([f"- {rec}" for rec in fit_score.recommendations])}

---
*Generated by Job Application Automator using GPT-OSS 20B*
"""
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"📊 Summary report saved: {report_path}")


def main():
    """Run the full pipeline test."""
    print_separator("🚀 JOB APPLICATION AUTOMATION - FULL PIPELINE TEST")
    
    # Define sample job posting that's always available as fallback
    sample_job = JobPosting(
        url="https://example.com/sample-job",
        title="Senior Software Engineer - Machine Learning",
        company="InnovateTech Solutions",
        location="San Francisco, CA",
        description="We are seeking a Senior Software Engineer with expertise in machine learning and AI to join our growing team. You will work on cutting-edge projects involving large language models, computer vision, and natural language processing. The ideal candidate has experience with Python, TensorFlow, PyTorch, and cloud platforms like AWS. You should be comfortable working in an agile environment and have a passion for solving complex technical challenges.",
        skills=['python', 'machine learning', 'tensorflow', 'pytorch', 'aws', 'nlp', 'computer vision', 'ai'],
        requirements=['5+ years software engineering experience', 'MS/PhD in Computer Science or related field', 'Experience with ML frameworks', 'Strong Python programming skills', 'Cloud platform experience']
    )
    
    # Prompt for job URL
    print("\n🔍 Please provide a job posting URL to test with:")
    print("Examples:")
    print("- https://jobs.lever.co/...")
    print("- https://boards.greenhouse.io/...")
    print("- https://careers.company.com/...")
    print("- Or any company careers page")
    
    job_url = input("\n🌐 Enter job posting URL: ").strip()
    
    # Prompt for additional context information
    print("\n💡 Additional Context Information:")
    print("Please provide any important information that might be useful for the LLM to know")
    print("when personalizing your resume and cover letter. This could include:")
    print("- Specific projects or achievements you want highlighted")
    print("- Technologies or tools you want emphasized")
    print("- Unique aspects of your background relevant to this role")
    print("- Company-specific knowledge or connections")
    print("- Portfolio highlights or special accomplishments")
    print("\nExamples:")
    print('- "The student productivity agent frontend was built entirely in Figma first"')
    print('- "Led the migration from React to Vue.js, reducing bundle size by 40%"')
    print('- "Published research paper on neural networks at ICML 2024"')
    print("- Leave blank to skip this section")
    
    additional_context = input("\n📝 Enter additional context (or press Enter to skip): ").strip()
    
    if not job_url:
        # Use the sample job for testing
        job_url = sample_job.url
        print(f"Using sample job for testing: {job_url}")
        use_sample = True
    else:
        use_sample = False
    
    # Create output directory with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_dir = f"/Users/lbrevoort/Desktop/projects/job-application-automator/output/full_test_{timestamp}"
    os.makedirs(output_dir, exist_ok=True)
    
    try:
        print_separator("🕷️  STEP 1: SCRAPING AND PARSING JOB POSTING")
        
        if use_sample:
            job_posting = sample_job
            print("Using sample job posting for demonstration...")
        else:
            # Initialize job scraper and Ollama client
            print("🔄 Initializing job scraper and LLM parser...")
            ollama_client = OllamaIntegration()
            
            with JobScraper(use_selenium=True, headless=True) as scraper:
                print(f"🌐 Step 1a: Scraping raw content from: {job_url}")
                raw_content = scraper.scrape_raw_content(job_url)
                
                if not raw_content.success:
                    print(f"❌ Failed to scrape content: {raw_content.error_message}")
                    print("Using sample job posting instead...")
                    job_posting = sample_job
                else:
                    print(f"✅ Raw content extracted ({len(raw_content.cleaned_text)} chars)")
                    print(f"   Domain: {raw_content.domain}")
                    print(f"   Page title: {raw_content.page_title}")
                    
                    print(f"🧠 Step 1b: Parsing job details with LLM...")
                    job_posting = ollama_client.parse_job_content(raw_content)
                    
                    if not job_posting.title or "Error" in job_posting.title:
                        print("❌ LLM parsing failed. Using sample data...")
                        job_posting = sample_job
                    else:
                        print("✅ Job details parsed successfully!")
        
        print_job_info(job_posting)
        
        print_separator("📄 STEP 2: PERSONALIZING RESUME")
        
        # Initialize resume processor
        print("🔄 Initializing LaTeX resume processor...")
        resume_processor = LaTeXResumeProcessor()
        
        # Generate personalized resume
        print(f"✏️  Personalizing resume for {job_posting.title}...")
        if additional_context:
            print(f"💡 Using additional context: {additional_context[:100]}{'...' if len(additional_context) > 100 else ''}")
        
        resume_result = resume_processor.personalize_resume(
            job_posting=job_posting,
            output_path=os.path.join(output_dir, "personalized_resume.tex"),
            additional_context=additional_context if additional_context else None
        )
        
        print("✅ Resume personalization complete!")
        print(f"   Key changes: {len(resume_result.key_changes)}")
        for change in resume_result.key_changes[:3]:
            print(f"   - {change}")
        
        print_separator("💌 STEP 3: GENERATING COVER LETTER")
        
        # Initialize cover letter generator
        print("🔄 Initializing cover letter generator...")
        cover_letter_generator = CoverLetterGenerator()
        
        # Personal information for cover letter header
        personal_info = {
            'name': 'Luke Brevoort',
            'location': 'Littleton, CO',
            'phone': '720-862-5457',
            'email': 'luke@brevoort.com',
            'website': 'luke.brevoort.com'
        }
        
        # Generate personalized cover letter
        print(f"✏️  Generating cover letter for {job_posting.company}...")
        if additional_context:
            print(f"💡 Including additional context in cover letter generation...")
        
        cover_letter_result = cover_letter_generator.generate_personalized_cover_letter(
            job_posting=job_posting,
            personal_info=personal_info,
            output_path=os.path.join(output_dir, "personalized_cover_letter.md"),
            additional_context=additional_context if additional_context else None
        )
        
        print("✅ Cover letter generation complete!")
        print(f"   Tone: {cover_letter_result.tone}")
        print(f"   Skills highlighted: {', '.join(cover_letter_result.skills_highlighted)}")
        
        print_separator("🎯 STEP 4: ASSESSING FIT SCORE")
        
        # Use existing Ollama client if available, otherwise initialize
        print("🔄 Assessing candidate fit...")
        if 'ollama_client' not in locals():
            ollama_client = OllamaIntegration()
        
        # Get resume content for fit assessment
        with open(os.path.join(output_dir, "personalized_resume.tex"), 'r') as f:
            resume_text = f.read()
        
        # Assess fit score
        fit_score = ollama_client.assess_fit_score(
            resume_content=resume_text[:3000],  # First 3k chars
            job_posting=job_posting,
            cover_letter=cover_letter_result.markdown_content[:1500]  # First 1.5k chars
        )
        
        print("✅ Fit assessment complete!")
        print(f"   🎯 Fit Score: {fit_score.fit_score}/100")
        print(f"   💪 Top Strengths: {', '.join(fit_score.strengths[:2])}")
        print(f"   📈 Confidence Level: {fit_score.confidence_level}")
        
        print_separator("📊 STEP 5: GENERATING SUMMARY")
        
        # Save comprehensive summary report
        save_summary_report(job_posting, resume_result, cover_letter_result, fit_score, output_dir, additional_context)
        
        print_separator("🎉 PIPELINE TEST COMPLETED SUCCESSFULLY!")
        
        print(f"📁 All outputs saved to: {output_dir}")
        print("\n📋 Generated Files:")
        print(f"   📄 personalized_resume.tex")
        print(f"   💌 personalized_cover_letter.md") 
        print(f"   📊 application_summary.md")
        print(f"   🔧 personalized_resume_metadata.json")
        
        print(f"\n🎯 Final Results:")
        print(f"   Company: {job_posting.company}")
        print(f"   Position: {job_posting.title}")
        print(f"   Fit Score: {fit_score.fit_score}/100")
        print(f"   Assessment: {'🟢 Strong Match' if fit_score.fit_score >= 75 else '🟡 Moderate Match' if fit_score.fit_score >= 60 else '🔴 Weak Match'}")
        
        print("\n🚀 Ready to submit your personalized application!")
        
    except Exception as e:
        print(f"\n❌ Error during pipeline execution: {e}")
        print(f"   Check the logs for more details.")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
